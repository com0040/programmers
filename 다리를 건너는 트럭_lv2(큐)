from collections import deque

def solution(bridge_length, weight, trucks):
    # 다리를 건너는 트럭들의 무게와 위치를 담을 큐 생성
    queue = deque([0] * bridge_length)
    # 시간을 나타내는 변수 초기화
    time = 0
    # 다리를 건너고 있는 트럭들의 무게의 총합 초기화
    weight_sum = 0

    # 큐가 비어있지 않은 동안 반복
    while queue:
        # 시간을 1씩 증가시킴
        time += 1
        # 다리를 건너고 있는 트럭들 중 맨 앞에 있는 트럭의 위치가 다리의 길이와 같다면 큐에서 제거하고, weight_sum에서 해당 트럭의 무게를 뺌
        weight_sum -= queue.popleft()

        if trucks:
            # 다리를 건너고 있는 트럭들의 무게의 총합과 다음에 다리를 건널 트럭의 무게를 더한 값이 다리가 견딜 수 있는 무게를 초과하지 않는다면 큐에 다음 트럭을 추가하고, weight_sum에 해당 트럭의 무게를 더함
            if weight_sum + trucks[0] <= weight:
                queue.append(trucks.pop(0))
                weight_sum += queue[-1]
            # 그렇지 않다면, 큐에 0을 추가하여 다음 시간에 처리할 수 있도록 함
            else:
                queue.append(0)

    # 시간을 반환함
    return time


print(solution(2,10,[7,4,5,6]))# 8
print(solution(100,100,[10]))# 101
print(solution(100,100,[10,10,10,10,10,10,10,10,10,10])) # 110

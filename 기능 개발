from collections import deque 
import math

def solution(progresses, speeds): # 기능 개발 함수를 정의하고, 입력으로 작업 진행도 리스트와 작업 속도 리스트를 받는다.
    answer = [] # 결과값을 저장할 리스트인 answer를 빈 리스트로 초기화한다.
    li = deque() # 작업 완료까지 필요한 일 수를 저장할 deque 객체 li를 생성한다.
    
    for i in range(len(speeds)): # 작업 속도 리스트의 길이만큼 반복한다.
        li.append(math.ceil((100-progresses[i])/speeds[i])) # 작업 진행도와 작업 속도를 이용하여 작업 완료까지 필요한 일 수를 계산하여 li에 추가한다.
    a = li.popleft() # deque 객체 li에서 첫 번째 값을 꺼내서 변수 a에 저장한다.
    cnt = 1 # 작업 진행 상황이 같이 배포될 작업의 수를 저장할 변수 cnt를 1로 초기화한다.

    while li: # deque 객체 li가 비어있지 않는 동안 반복한다.
        if li[0]<=a: # deque 객체 li에서 첫 번째 값을 꺼내서 a와 비교한다.
            li.popleft() # deque 객체 li에서 첫 번째 값을 제거한다.
            cnt = cnt + 1 # 작업 진행 상황이 같이 배포될 작업의 수를 1 증가시킨다.
        else: # deque 객체 li에서 첫 번째 값이 a보다 큰 경우
            a = li.popleft() # deque 객체 li에서 첫 번째 값을 꺼내서 변수 a에 저장한다.
            answer.append(cnt) # 이전 작업 진행 상황이 같이 배포될 작업의 수를 결과값 리스트 answer에 추가한다.
            cnt = 1 # 새로운 작업 진행 상황이 같이 배포될 작업의 수를 1로 초기화한다.
    
    answer.append(cnt) # deque 객체 li에서 모든 값을 비교한 후 마지막 작업 진행 상황이 같이 배포될 작업의 수를 결과값 리스트 answer에 추가한다.
    return answer # 결과값 리스트 answer를 반환한다.
